- name: Provision AWS Infrastructure
  hosts: localhost
  gather_facts: False
  collections:
    - amazon.aws
  vars_files:
    - vars/vars.yml

  tasks:
    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ vpc_cidr_block }}"
        region: "{{ aws_region }}"
        state: present
      register: vpc

    - name: Create Subnet
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ subnet_cidr }}"
        region: "{{ aws_region }}"
        map_public: true
        state: present
      register: subnet

    - name: Create IGW
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        state: present
      register: igw

    - name: Create Route Table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        region: "{{ aws_region }}"
        state: present
      register: route_table

    - name: Associate Route Table with Subnet
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        subnets: "{{ subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        region: "{{ aws_region }}"
        state: present

    - name: Create Security Group
      amazon.aws.ec2_security_group:
        name: "{{ vpc_name }}-sg"
        description: "Security group for {{ vpc_name }}"
        vpc_id: "{{ vpc.vpc.id }}"
        rules:
          - proto: tcp
            ports:
              - 80
            cidr_ip: "0.0.0.0/0"
          - proto: tcp
            ports:
              - 22
            cidr_ip: "0.0.0.0/0"
        region: "{{ aws_region }}"
        state: present
      register: sg

    - name: Launch EC2 Instance
      amazon.aws.ec2_instance:
        image_id: "{{ aws_ami_id }}"
        instance_type: "{{ ec2_instance_type }}"
        key_name: "{{ keypair }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        network_interfaces:
          - device_index: 0
            subnet_id: "{{ subnet.subnet.id }}"
            assign_public_ip: true
            groups: 
              - "{{ sg.group_id }}"
        region: "{{ aws_region }}"
        state: present
        wait: yes
        wait_timeout: 500 
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_size: 8
      register: ec2

    - name: Wait for EC2 instance to be running
      amazon.aws.ec2_instance_info:
        instance_ids: "{{ ec2.instance_ids }}"
        region: "{{ aws_region }}"
      register: ec2_info

    - name: Debug EC2 instance info
      debug:
        var: ec2_info.instances

    - name: Install Docker on EC2
      ansible.builtin.apt:
        name: docker.io
        state: present
      become: yes
      become_method: sudo
      become_flags: '-n'

    - name: Run Docker Container on EC2
      command: docker run -d -p 80:80 shaharbaron/project-dev-college:latest
      become: yes
      become_method: sudo
      become_flags: '-n'
